function handleSelectionChange(currentKey, nextKey, nextDropdownId) {
  const currentDropdownId = keyToIdMap[currentKey];
  const currentDropdown = document.getElementById(currentDropdownId);

  if (!currentDropdown) {
    console.error(`Dropdown with id "${currentDropdownId}" not found.`);
    return;
  }

  const selectedValue = currentDropdown.value;

  if (selectedValue) {
    const filteredValues = values.filter(item => item[currentKey] === selectedValue);

    let nextOptions = [];
    if (nextKey === "Consumer") {
      // Flatten and deduplicate array values for Consumer
      const consumers = [];
      filteredValues.forEach(item => {
        if (Array.isArray(item[nextKey])) {
          consumers.push(...item[nextKey]);
        } else {
          consumers.push(item[nextKey]);
        }
      });
      nextOptions = [...new Set(consumers)];
    } else {
      // Handle normal keys
      nextOptions = [...new Set(filteredValues.map(item => item[nextKey]))];
    }

    console.log(`Options for ${nextKey}:`, nextOptions); // Debugging line
    updateDropdown(nextDropdownId, nextOptions);
  } else {
    updateDropdown(nextDropdownId, []);
  }
}
