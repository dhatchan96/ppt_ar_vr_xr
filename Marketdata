function handleSelectionChange(currentKey, nextKey, nextDropdownId) {
  const currentDropdownId = keyToIdMap[currentKey]; // Map JSON key to dropdown id
  const currentDropdown = document.getElementById(currentDropdownId);

  if (!currentDropdown) {
    console.error(`Dropdown with id "${currentDropdownId}" not found.`);
    return;
  }

  const selectedValue = currentDropdown.value;

  if (selectedValue) {
    // Filter values based on the current selection
    const filteredValues = values.filter(item => {
      if (Array.isArray(item[currentKey])) {
        return item[currentKey].includes(selectedValue); // Handle arrays for Consumer
      } else {
        return item[currentKey] === selectedValue; // Handle normal fields
      }
    });

    let nextOptions = [];
    if (Array.isArray(filteredValues) && nextKey === "Cutoff") {
      nextOptions = [...new Set(filteredValues.map(item => item[nextKey]))];
    } else {
      // Handle normal keys for other dropdowns
      nextOptions = [...new Set(filteredValues.map(item => item[nextKey]))];
    }

    console.log(`Options for ${nextKey}:`, nextOptions); // Debugging log
    updateDropdown(nextDropdownId, nextOptions);
  } else {
    updateDropdown(nextDropdownId, []); // Reset subsequent dropdown if no value is selected
  }
}
