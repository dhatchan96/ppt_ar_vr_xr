import React, { useState, useEffect } from 'react';
import API from '../api';
import './EnhancedVulnerabilityManagement.css';
import * as XLSX from 'xlsx';

const EnhancedVulnerabilityManagement = () => {
    const [vulnerabilities, setVulnerabilities] = useState([]);
    const [loading, setLoading] = useState(true);
    const [filters, setFilters] = useState({
        severity: 'ALL',
        priority: 'ALL',
        wave_assignment: 'ALL'
    });
    const [pagination, setPagination] = useState({
        page: 1,
        per_page: 20,
        total_count: 0,
        total_pages: 0
    });
    const [selectedVulnerability, setSelectedVulnerability] = useState(null);
    const [showDetails, setShowDetails] = useState(false);
    const [showTerraformModal, setShowTerraformModal] = useState(false);
    const [terraformContent, setTerraformContent] = useState('');
    const [generatingTerraform, setGeneratingTerraform] = useState(false);
    const [hostname, setHostname] = useState('');
    const [currentVulnerability, setCurrentVulnerability] = useState(null);
    const [generatedPrompts, setGeneratedPrompts] = useState(() => {
        // Load generated prompts from localStorage on component mount
        const saved = localStorage.getItem('generatedPrompts');
        return saved ? JSON.parse(saved) : {};
    });
    const [importingExcel, setImportingExcel] = useState(false);
    const [excelData, setExcelData] = useState([]);

    useEffect(() => {
        fetchVulnerabilities();
    }, [filters, pagination.page]);

    // Clear generated prompts when vulnerabilities change (optional - uncomment if needed)
    // useEffect(() => {
    //     if (vulnerabilities.length > 0) {
    //         // Clear prompts for vulnerabilities that no longer exist
    //         const validIds = vulnerabilities.map(v => v.id);
    //         const newPrompts = {};
    //         Object.keys(generatedPrompts).forEach(id => {
    //             if (validIds.includes(id)) {
    //                 newPrompts[id] = generatedPrompts[id];
    //             }
    //         });
    //         setGeneratedPrompts(newPrompts);
    //         localStorage.setItem('generatedPrompts', JSON.stringify(newPrompts));
    //     }
    // }, [vulnerabilities]);

    const fetchVulnerabilities = async () => {
        try {
            setLoading(true);
            const params = new URLSearchParams({
                ...filters,
                page: pagination.page,
                per_page: pagination.per_page
            });

            const response = await API.get(`/api/v1/vulnerabilities/enhanced?${params}`);
            const data = response.data;

            if (data.success) {
                setVulnerabilities(data.vulnerabilities);
                setPagination(prev => ({
                    ...prev,
                    total_count: data.total_count,
                    total_pages: data.total_pages
                }));
            }
        } catch (error) {
            console.error('Error fetching vulnerabilities:', error);
        } finally {
            setLoading(false);
        }
    };

    const handleFilterChange = (filterType, value) => {
        setFilters(prev => ({ ...prev, [filterType]: value }));
        setPagination(prev => ({ ...prev, page: 1 }));
    };

    const handlePageChange = (newPage) => {
        setPagination(prev => ({ ...prev, page: newPage }));
    };

    const getRiskScoreColor = (score) => {
        if (score >= 8) return '#dc3545';
        if (score >= 6) return '#fd7e14';
        if (score >= 4) return '#ffc107';
        return '#28a745';
    };

    const getSeverityColor = (severity) => {
        const colors = {
            'CRITICAL_BOMB': '#dc3545',
            'HIGH_RISK': '#fd7e14',
            'MEDIUM_RISK': '#ffc107',
            'LOW_RISK': '#28a745',
            'SUSPICIOUS': '#6c757d'
        };
        return colors[severity] || '#6c757d';
    };

    const getPriorityColor = (priority) => {
        const colors = {
            'CRITICAL': '#dc3545',
            'HIGH': '#fd7e14',
            'MEDIUM': '#ffc107',
            'LOW': '#28a745'
        };
        return colors[priority] || '#6c757d';
    };

    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD'
        }).format(amount);
    };

    const generateTerraformPrompt = (vulnerability, customHostname = '') => {
        const hostnamePlaceholder = customHostname || 'YOUR_HOSTNAME_HERE';
        
        const basePrompt = `# GitHub Copilot Terraform Generation Prompt

## Vulnerability Context
You are a DevOps engineer tasked with creating a Terraform configuration to remediate a security vulnerability.

**AIT Tag**: ${vulnerability.ait_tag || 'AIT-Unknown'}
**Vulnerability**: ${vulnerability.title || vulnerability.description}
**Severity**: ${vulnerability.severity || 'Unknown'}
**Risk Score**: ${vulnerability.risk_score || 'N/A'}
**Target Hostname**: ${hostnamePlaceholder}

## Remediation Action Required
${vulnerability.remediation_action || 'Update to latest version'}

## Your Task
Generate a complete Terraform (.tf) configuration file that:

1. **Addresses the specific vulnerability** mentioned above
2. **Implements the remediation action** specified
3. **Follows AWS best practices** for security and infrastructure
4. **Includes monitoring and alerting** via CloudWatch
5. **Provides automated backup solutions**
6. **Uses proper resource naming** with the AIT tag as prefix
7. **Includes comprehensive documentation** in comments
8. **Configures the target hostname** as specified above

## Expected Output
A single, complete Terraform configuration file (.tf) that can be applied directly to AWS infrastructure.

## Example Structure
- AWS provider configuration
- Security groups with proper rules
- EC2 instances or other relevant resources
- CloudWatch monitoring and alarms
- User data scripts for automated remediation
- Proper tagging and documentation
- Hostname configuration for the target system

Please generate the complete Terraform configuration now.`;

        return basePrompt;
    };

    const handleRunTerraform = async (vulnerability) => {
        try {
            setGeneratingTerraform(true);
            const prompt = generateTerraformPrompt(vulnerability);
            
            // Store the generated prompt for this vulnerability
            const newPrompts = {
                ...generatedPrompts,
                [vulnerability.id]: prompt
            };
            setGeneratedPrompts(newPrompts);
            // Save to localStorage for persistence
            localStorage.setItem('generatedPrompts', JSON.stringify(newPrompts));
            
            // Show success message
            alert('GitHub Copilot prompt generated successfully! Click "View TF Prompt" to see the prompt.');
        } catch (error) {
            console.error('Error generating prompt:', error);
            alert('Error generating prompt: ' + error.message);
        } finally {
            setGeneratingTerraform(false);
        }
    };

    const handleViewTerraformPrompt = (vulnerability) => {
        // Check if prompt has been generated for this vulnerability
        const prompt = generatedPrompts[vulnerability.id];
        if (prompt) {
            setCurrentVulnerability(vulnerability);
            setTerraformContent(prompt);
            setHostname(''); // Reset hostname for new vulnerability
            setShowTerraformModal(true);
        } else {
            alert('Please click "Generate Prompt" first to create the GitHub Copilot prompt for this vulnerability.');
        }
    };

    const updatePromptWithHostname = (newHostname) => {
        if (currentVulnerability) {
            const updatedPrompt = generateTerraformPrompt(currentVulnerability, newHostname);
            setTerraformContent(updatedPrompt);
        }
    };

    const handleHostnameChange = (e) => {
        const newHostname = e.target.value;
        setHostname(newHostname);
        updatePromptWithHostname(newHostname);
    };

    const clearAllPrompts = () => {
        setGeneratedPrompts({});
        localStorage.removeItem('generatedPrompts');
        alert('All generated prompts have been cleared.');
    };

    const handleExcelUpload = (event) => {
        const file = event.target.files[0];
        if (!file) return;

        setImportingExcel(true);
        const reader = new FileReader();

        reader.onload = (e) => {
            try {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, { type: 'array' });
                const sheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[sheetName];
                const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

                // Skip header row and process data
                const processedData = jsonData.slice(1).map((row, index) => {
                    return {
                        id: `vuln-${Date.now()}-${index}`,
                        gis_id: row[0] || `GIS-${Date.now()}-${index}`, // GIS ID from first column
                        ait_tag: row[1] || 'AIT-Unknown',
                        title: row[2] || 'Unknown Vulnerability',
                        description: row[3] || row[2] || 'No description available',
                        severity: row[4] || 'MEDIUM_RISK',
                        remediation_action: row[5] || 'Update to latest version',
                        priority: row[6] || 'MEDIUM',
                        wave_assignment: row[7] || 'UNASSIGNED',
                        cost_impact: parseFloat(row[8]) || 0,
                        status: row[9] || 'ACTIVE_THREAT',
                        created_date: row[10] || new Date().toISOString(),
                        source: 'excel_import'
                    };
                });

                setExcelData(processedData);
                setVulnerabilities(processedData);
                setPagination(prev => ({
                    ...prev,
                    total_count: processedData.length,
                    total_pages: Math.ceil(processedData.length / pagination.per_page)
                }));

                alert(`Successfully imported ${processedData.length} vulnerabilities from Excel file!`);
            } catch (error) {
                console.error('Error processing Excel file:', error);
                alert('Error processing Excel file. Please check the file format.');
            } finally {
                setImportingExcel(false);
            }
        };

        reader.onerror = () => {
            alert('Error reading Excel file.');
            setImportingExcel(false);
        };

        reader.readAsArrayBuffer(file);
        event.target.value = ''; // Reset file input
    };

    const downloadSampleExcel = () => {
        const sampleData = [
            ['GIS ID', 'AIT Tag', 'Title', 'Description', 'Severity', 'Remediation Action', 'Priority', 'Wave Assignment', 'Cost Impact', 'Status', 'Created Date'],
            ['827593952', 'AIT-001', 'SQL Injection Vulnerability', 'SQL injection vulnerability in login form allowing unauthorized access', 'CRITICAL_BOMB', 'Use parameterized queries and input validation', 'CRITICAL', 'ASSIGNED', 50000, 'ACTIVE_THREAT', '2024-01-15'],
            ['829991671', 'AIT-002', 'XSS Vulnerability', 'Cross-site scripting in user input field allowing script injection', 'HIGH_RISK', 'Implement input validation and output encoding', 'HIGH', 'UNASSIGNED', 25000, 'ACTIVE_THREAT', '2024-01-16'],
            ['831234567', 'AIT-003', 'Hardcoded Credentials', 'Hardcoded database credentials in configuration file', 'MEDIUM_RISK', 'Move credentials to environment variables', 'MEDIUM', 'ASSIGNED', 15000, 'ACTIVE_THREAT', '2024-01-17'],
            ['832345678', 'AIT-004', 'Outdated Dependencies', 'Using vulnerable library version with known security issues', 'LOW_RISK', 'Update to latest secure version', 'LOW', 'UNASSIGNED', 5000, 'ACTIVE_THREAT', '2024-01-18'],
            ['833456789', 'AIT-005', 'Missing Input Validation', 'No input validation on API endpoint allowing malicious data', 'HIGH_RISK', 'Add comprehensive input validation', 'HIGH', 'ASSIGNED', 30000, 'ACTIVE_THREAT', '2024-01-19'],
            ['834567890', 'AIT-006', 'Insecure File Upload', 'File upload without proper validation allowing malicious files', 'CRITICAL_BOMB', 'Implement file type validation and scanning', 'CRITICAL', 'UNASSIGNED', 45000, 'ACTIVE_THREAT', '2024-01-20'],
            ['835678901', 'AIT-007', 'Weak Password Policy', 'No password complexity requirements in user registration', 'MEDIUM_RISK', 'Enforce strong password policy', 'MEDIUM', 'ASSIGNED', 12000, 'ACTIVE_THREAT', '2024-01-21'],
            ['836789012', 'AIT-008', 'Missing HTTPS', 'Application running on HTTP instead of HTTPS', 'HIGH_RISK', 'Enable HTTPS and redirect HTTP traffic', 'HIGH', 'UNASSIGNED', 35000, 'ACTIVE_THREAT', '2024-01-22'],
            ['837890123', 'AIT-009', 'Insecure Session Management', 'Session tokens not properly invalidated on logout', 'MEDIUM_RISK', 'Implement proper session management', 'MEDIUM', 'ASSIGNED', 18000, 'ACTIVE_THREAT', '2024-01-23'],
            ['838901234', 'AIT-010', 'Directory Traversal', 'Path traversal vulnerability allowing access to sensitive files', 'CRITICAL_BOMB', 'Implement proper path validation', 'CRITICAL', 'UNASSIGNED', 55000, 'ACTIVE_THREAT', '2024-01-24']
        ];

        const ws = XLSX.utils.aoa_to_sheet(sampleData);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Vulnerabilities');
        
        // Auto-size columns
        const colWidths = [
            { wch: 12 }, // GIS ID
            { wch: 12 }, // AIT Tag
            { wch: 35 }, // Title
            { wch: 50 }, // Description
            { wch: 15 }, // Severity
            { wch: 40 }, // Remediation Action
            { wch: 12 }, // Priority
            { wch: 18 }, // Wave Assignment
            { wch: 15 }, // Cost Impact
            { wch: 18 }, // Status
            { wch: 15 }  // Created Date
        ];
        ws['!cols'] = colWidths;

        // Add some styling to the header row
        for (let col = 0; col < sampleData[0].length; col++) {
            const cellRef = XLSX.utils.encode_cell({ r: 0, c: col });
            if (!ws[cellRef]) continue;
            ws[cellRef].s = {
                font: { bold: true, color: { rgb: "FFFFFF" } },
                fill: { fgColor: { rgb: "4472C4" } },
                alignment: { horizontal: "center" }
            };
        }

        XLSX.writeFile(wb, 'vulnerability_template.xlsx');
    };

    const resetToApiData = () => {
        setExcelData([]);
        fetchVulnerabilities();
        alert('Switched back to API data. Excel data has been cleared.');
    };

    return (
        <div className="enhanced-vulnerability-management">
            <div className="header">
                <div className="header-content">
                    <div>
                        <h2>Enhanced Vulnerability Management</h2>
                        <p>Advanced vulnerability tracking with risk scoring and wave management</p>
                    </div>
                    <div className="header-actions">
                        <span className="prompt-counter">
                            {Object.keys(generatedPrompts).length} prompts generated
                        </span>
                        {excelData.length > 0 && (
                            <span className="excel-data-indicator">
                                📊 {excelData.length} Excel records loaded
                            </span>
                        )}
                        {Object.keys(generatedPrompts).length > 0 && (
                            <button 
                                className="btn-clear-prompts"
                                onClick={clearAllPrompts}
                                title="Clear all generated prompts"
                            >
                                Clear All
                            </button>
                        )}
                        {excelData.length > 0 && (
                            <button 
                                className="btn-reset-api"
                                onClick={resetToApiData}
                                title="Switch back to API data"
                            >
                                🔄 Reset to API
                            </button>
                        )}
                        <button 
                            className="btn-download-sample"
                            onClick={downloadSampleExcel}
                            title="Download sample Excel template"
                        >
                            📥 Download Template
                        </button>
                        <div className="excel-upload-container">
                            <input
                                type="file"
                                id="excel-upload"
                                accept=".xlsx,.xls"
                                onChange={handleExcelUpload}
                                style={{ display: 'none' }}
                            />
                            <label 
                                htmlFor="excel-upload" 
                                className="btn-fetch"
                                title="Upload Excel file to populate vulnerability table"
                            >
                                {importingExcel ? '📊 Importing...' : '📊 Fetch from Excel'}
                            </label>
                        </div>
                    </div>
                </div>
            </div>

            {/* Filters */}
            <div className="filters-section">
                <div className="filter-group">
                    <label>Severity:</label>
                    <select 
                        value={filters.severity} 
                        onChange={(e) => handleFilterChange('severity', e.target.value)}
                    >
                        <option value="ALL">All Severities</option>
                        <option value="CRITICAL_BOMB">Critical Bomb</option>
                        <option value="HIGH_RISK">High Risk</option>
                        <option value="MEDIUM_RISK">Medium Risk</option>
                        <option value="LOW_RISK">Low Risk</option>
                        <option value="SUSPICIOUS">Suspicious</option>
                    </select>
                </div>

                <div className="filter-group">
                    <label>Priority:</label>
                    <select 
                        value={filters.priority} 
                        onChange={(e) => handleFilterChange('priority', e.target.value)}
                    >
                        <option value="ALL">All Priorities</option>
                        <option value="CRITICAL">Critical</option>
                        <option value="HIGH">High</option>
                        <option value="MEDIUM">Medium</option>
                        <option value="LOW">Low</option>
                    </select>
                </div>

                <div className="filter-group">
                    <label>Wave Assignment:</label>
                    <select 
                        value={filters.wave_assignment} 
                        onChange={(e) => handleFilterChange('wave_assignment', e.target.value)}
                    >
                        <option value="ALL">All Assignments</option>
                        <option value="ASSIGNED">Assigned to Wave</option>
                        <option value="UNASSIGNED">Unassigned</option>
                    </select>
                </div>
            </div>

            {/* Statistics */}
            <div className="statistics-section">
                <div className="stat-card">
                    <h3>Total Vulnerabilities</h3>
                    <p className="stat-number">{pagination.total_count}</p>
                </div>
                <div className="stat-card">
                    <h3>Critical Issues</h3>
                    <p className="stat-number critical">
                        {vulnerabilities.filter(v => v.severity === 'CRITICAL_BOMB').length}
                    </p>
                </div>
                <div className="stat-card">
                    <h3>High Risk</h3>
                    <p className="stat-number high">
                        {vulnerabilities.filter(v => v.severity === 'HIGH_RISK').length}
                    </p>
                </div>
                <div className="stat-card">
                    <h3>Estimated Cost Impact</h3>
                    <p className="stat-number">
                        {formatCurrency(vulnerabilities.reduce((sum, v) => sum + (v.cost_impact || 0), 0))}
                    </p>
                </div>
            </div>

            {/* Vulnerabilities Table */}
            <div className="vulnerabilities-table-container">
                {loading ? (
                    <div className="loading">Loading vulnerabilities...</div>
                ) : (
                    <table className="vulnerabilities-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>AIT</th>
                                <th>Vulnerability</th>
                                <th>Remediation Action</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {vulnerabilities.map((vuln) => (
                                <tr key={vuln.id} className="vulnerability-row">
                                    <td className="vuln-id">{vuln.id?.substring(0, 8)}...</td>
                                    <td className="ait-tag">
                                        <span className="ait-badge">
                                            {vuln.ait_tag || 'AIT-Unknown'}
                                        </span>
                                    </td>
                                    <td className="vuln-title">
                                        <div className="vuln-info">
                                            <div className="vuln-name">{vuln.title || vuln.description}</div>
                                            <div className="vuln-severity">
                                                <span 
                                                    className="severity-badge"
                                                    style={{ backgroundColor: getSeverityColor(vuln.severity) }}
                                                >
                                                    {vuln.severity}
                                                </span>
                                            </div>
                                        </div>
                                    </td>
                                    <td className="remediation-action">
                                        {vuln.remediation_action || 'Update to latest version'}
                                    </td>
                                    <td className="action-buttons">
                                        <button 
                                            className="btn-run"
                                            onClick={() => handleRunTerraform(vuln)}
                                            disabled={generatingTerraform}
                                        >
                                            {generatingTerraform ? 'Generating...' : 'Generate Prompt'}
                                        </button>
                                        <button 
                                            className="btn-view-tf"
                                            onClick={() => handleViewTerraformPrompt(vuln)}
                                            disabled={!generatedPrompts[vuln.id]}
                                            title={!generatedPrompts[vuln.id] ? 'Click "Generate Prompt" first to create GitHub Copilot prompt' : 'View GitHub Copilot prompt'}
                                        >
                                            View Prompt
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                )}
            </div>

            {/* Pagination */}
            {pagination.total_pages > 1 && (
                <div className="pagination">
                    <button 
                        onClick={() => handlePageChange(pagination.page - 1)}
                        disabled={pagination.page === 1}
                        className="btn-page"
                    >
                        Previous
                    </button>
                    
                    <span className="page-info">
                        Page {pagination.page} of {pagination.total_pages}
                    </span>
                    
                    <button 
                        onClick={() => handlePageChange(pagination.page + 1)}
                        disabled={pagination.page === pagination.total_pages}
                        className="btn-page"
                    >
                        Next
                    </button>
                </div>
            )}

            {/* Vulnerability Details Modal */}
            {showDetails && selectedVulnerability && (
                <div className="modal-overlay" onClick={() => setShowDetails(false)}>
                    <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                        <div className="modal-header">
                            <h3>Vulnerability Details</h3>
                            <button 
                                className="btn-close"
                                onClick={() => setShowDetails(false)}
                            >
                                ×
                            </button>
                        </div>
                        
                        <div className="modal-body">
                            <div className="detail-section">
                                <h4>Basic Information</h4>
                                <div className="detail-grid">
                                    <div className="detail-item">
                                        <label>ID:</label>
                                        <span>{selectedVulnerability.id}</span>
                                    </div>
                                    <div className="detail-item">
                                        <label>Title:</label>
                                        <span>{selectedVulnerability.title || selectedVulnerability.description}</span>
                                    </div>
                                    <div className="detail-item">
                                        <label>Severity:</label>
                                        <span 
                                            className="severity-badge"
                                            style={{ backgroundColor: getSeverityColor(selectedVulnerability.severity) }}
                                        >
                                            {selectedVulnerability.severity}
                                        </span>
                                    </div>
                                    <div className="detail-item">
                                        <label>Priority:</label>
                                        <span 
                                            className="priority-badge"
                                            style={{ backgroundColor: getPriorityColor(selectedVulnerability.priority) }}
                                        >
                                            {selectedVulnerability.priority}
                                        </span>
                                    </div>
                                </div>
                            </div>

                            <div className="detail-section">
                                <h4>Risk Assessment</h4>
                                <div className="detail-grid">
                                    <div className="detail-item">
                                        <label>Risk Score:</label>
                                        <span 
                                            className="risk-score"
                                            style={{ color: getRiskScoreColor(selectedVulnerability.risk_score) }}
                                        >
                                            {selectedVulnerability.risk_score}/10
                                        </span>
                                    </div>
                                    <div className="detail-item">
                                        <label>Remediation Priority:</label>
                                        <span>{selectedVulnerability.remediation_priority}</span>
                                    </div>
                                    <div className="detail-item">
                                        <label>Cost Impact:</label>
                                        <span>{formatCurrency(selectedVulnerability.cost_impact || 0)}</span>
                                    </div>
                                    <div className="detail-item">
                                        <label>FTE Requirement:</label>
                                        <span>{selectedVulnerability.fte_requirement || 0} FTE</span>
                                    </div>
                                </div>
                            </div>

                            {selectedVulnerability.wave_assignment && (
                                <div className="detail-section">
                                    <h4>Wave Assignment</h4>
                                    <div className="detail-grid">
                                        <div className="detail-item">
                                            <label>Wave ID:</label>
                                            <span>{selectedVulnerability.wave_assignment.wave_id}</span>
                                        </div>
                                        <div className="detail-item">
                                            <label>Status:</label>
                                            <span>{selectedVulnerability.wave_assignment.status}</span>
                                        </div>
                                        <div className="detail-item">
                                            <label>Assigned Date:</label>
                                            <span>{new Date(selectedVulnerability.wave_assignment.assigned_date).toLocaleDateString()}</span>
                                        </div>
                                        <div className="detail-item">
                                            <label>Estimated Effort:</label>
                                            <span>{selectedVulnerability.wave_assignment.estimated_effort_hours} hours</span>
                                        </div>
                                    </div>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            )}

            {/* GitHub Copilot Prompt Modal */}
            {showTerraformModal && (
                <div className="modal-overlay" onClick={() => setShowTerraformModal(false)}>
                    <div className="modal-content terraform-modal" onClick={(e) => e.stopPropagation()}>
                        <div className="modal-header">
                            <h3>GitHub Copilot Prompt</h3>
                            <button 
                                className="btn-close"
                                onClick={() => setShowTerraformModal(false)}
                            >
                                ×
                            </button>
                        </div>
                        
                        <div className="modal-body">
                            {/* Hostname Input Section */}
                            <div className="hostname-input-section mb-3">
                                <div className="row">
                                    <div className="col-md-6">
                                        <label htmlFor="hostnameInput" className="form-label">
                                            <i className="fas fa-server"></i> Target Hostname:
                                        </label>
                                        <input
                                            type="text"
                                            className="form-control"
                                            id="hostnameInput"
                                            placeholder="Enter target hostname (e.g., web-server-01, api-gateway-prod)"
                                            value={hostname}
                                            onChange={handleHostnameChange}
                                        />
                                        <div className="form-text">
                                            Enter the hostname that will be used in the Terraform configuration. 
                                            This will replace the placeholder in the prompt.
                                        </div>
                                    </div>
                                    <div className="col-md-6 d-flex align-items-end">
                                        <div className="alert alert-info mb-0">
                                            <i className="fas fa-info-circle"></i>
                                            <strong>Tip:</strong> The hostname will be automatically updated in the prompt below as you type.
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div className="terraform-content">
                                <div className="prompt-info">
                                    <p><strong>Instructions:</strong> Copy this prompt and paste it into GitHub Copilot to automatically generate the Terraform configuration file.</p>
                                </div>
                                <pre className="terraform-code">
                                    <code>{terraformContent}</code>
                                </pre>
                            </div>
                            
                            <div className="terraform-actions">
                                <button 
                                    className="btn-copy"
                                    onClick={() => {
                                        navigator.clipboard.writeText(terraformContent);
                                        alert('GitHub Copilot prompt copied to clipboard!');
                                    }}
                                >
                                    Copy Prompt to Clipboard
                                </button>
                                <button 
                                    className="btn-download"
                                    onClick={() => {
                                        const blob = new Blob([terraformContent], { type: 'text/plain' });
                                        const url = URL.createObjectURL(blob);
                                        const a = document.createElement('a');
                                        a.href = url;
                                        a.download = 'github-copilot-prompt.txt';
                                        document.body.appendChild(a);
                                        a.click();
                                        document.body.removeChild(a);
                                        URL.revokeObjectURL(url);
                                    }}
                                >
                                    Download Prompt File
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default EnhancedVulnerabilityManagement;

