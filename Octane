import logging
import datetime
from gz.config.octane import OCTANE_CONFIG
from gz.sdlc.octane.client import OctaneClient

# Set up logging
logger = logging.getLogger(__name__)

class OctaneApi(object):
    """
    API wrapper for interacting with Octane for test execution tracking.
    """

    def __init__(self, config):
        """
        Initialize the Octane API client with the provided configuration.

        :param config: Configuration dictionary for Octane.
        """
        self.octaneClient = OctaneClient(config)
        self.octaneConfig = config

    def _calculateEvidencePath(self, build):
        """
        Generate a path for storing test evidence based on release and version timestamp.

        :param build: Build object containing version information.
        :return: Formatted evidence path as a string.
        """
        versionTimestamp = datetime.datetime.fromtimestamp(build.trainVersion.version)
        return f"{build.releaseTrain.uniqueName}/{versionTimestamp.year}{(int(versionTimestamp.month/4)+1)}"

    def upload(self, rootApplicationModuleID, testSuitePath, suiteRunName, results, jiras):
        """
        Upload test results to Octane.

        :param rootApplicationModuleID: ID of the root application module.
        :param testSuitePath: Path of the test suite.
        :param suiteRunName: Name of the test suite run.
        :param results: Test execution results.
        :param jiras: List of Jira IDs linked to the test cases.
        """
        jiraOctaneMap = {d['jira_key_id']: d['id'] for d in self.octaneClient.getOctaneIds(jiras)}
        
        # Create or fetch the test suite
        applicationModuleID, testSuiteID = self.createTestSuite(testSuitePath, rootApplicationModuleID)

        # Upload results for each Jira issue
        for jira, octaneID in jiraOctaneMap.items():
            resp = self.octaneClient.upload(results, suiteRunName, applicationModuleID, testSuiteID)
            logger.info(f"Upload response for Jira {jira}: {resp}")

        # Retrieve suite run details
        suiteRun = self.octaneClient.getSuiteRun(suiteRunName, testSuiteID)
        suiteRunID = suiteRun[0]['id'] if suiteRun else None

        if suiteRunID:
            self.octaneClient.updateAutoRuns(octaneID, suiteRunName, suiteRunID)

    def uploadQREvidence(self, build, regressionJiras=[], featureJiras=[]):
        """
        Upload test execution evidence for a given build.

        :param build: Build object.
        :param regressionJiras: List of regression Jira IDs.
        :param featureJiras: List of feature Jira IDs.
        """
        rootApplicationModuleID = self.octaneConfig.get("rootApplicationModuleID")

        # Upload test evidence
        return self.upload(
            rootApplicationModuleID, 
            build.uniqueName, 
            results=[],  # Assuming results are obtained elsewhere
            jiras=set(regressionJiras + featureJiras)
        )

    def createApplicationModule(self, child, parentID):
        """
        Create or fetch an application module in Octane.

        :param child: Name of the application module.
        :param parentID: Parent module ID.
        :return: ID of the created or fetched module.
        """
        # Check if module exists
        resp = self.octaneClient.getApplicationModule(child, parentID)
        if resp and resp["response"] == "Success" and resp["total_count"] == 1:
            return resp["data"][0]["id"]

        # Create new module if it doesn't exist
        resp = self.octaneClient.createApplicationModule(child, parentID)
        if resp and resp["response"] == "Success" and resp["total_count"] == 1:
            return resp["data"][0]["id"]

        raise Exception(f"Failed to create or fetch Application Module: {child}, Parent ID: {parentID}")

    def createTestSuite(self, path, parentID):
        """
        Create or fetch a test suite in Octane.

        :param path: Full path of the test suite.
        :param parentID: Parent module ID.
        :return: Tuple of (applicationModuleID, testSuiteID).
        """
        applicationModulePath, suiteName = path.rsplit("/", 1)
        applicationModuleID = self.createApplicationModule(applicationModulePath, parentID)

        # Check if test suite exists
        resp = self.octaneClient.getTestSuite(suiteName, applicationModuleID)
        if resp and resp["response"] == "Success" and resp["total_count"] == 1:
            return applicationModuleID, resp["data"][0]["id"]

        # Create new test suite if it doesn't exist
        resp = self.octaneClient.createTestSuite(suiteName, applicationModuleID)
        if resp and resp["response"] == "Success" and resp["total_count"] == 1:
            return applicationModuleID, resp["data"][0]["id"]

        raise Exception(f"Failed to create or fetch Test Suite: {suiteName}, Application Module ID: {applicationModuleID}")

def main():
    """
    Entry point for running the Octane API operations.
    """
    from qz.core.qzrelease.train import ReleaseTrain

    # Load configuration and initialize Octane client
    ReleaseTrain.config.set("prod")
    b = ReleaseTrain("core.registries").stages["prod.new"].stages["int"].builds[0]

    # Initialize Octane API client
    client = OctaneApi(OCTANE_CONFIG["DEV"])

    # Upload test execution evidence
    client.uploadQREvidence(b, ["RPRICHS-290"])
