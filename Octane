def upload(self, results, externalRunID, applicationModuleID, testSuiteID):
    """
    Upload test results to Octane.

    :param results: The test results data.
    :param externalRunID: External run identifier.
    :param applicationModuleID: Application module ID.
    :param testSuiteID: Test suite ID.
    """
    sliceSize = self.octaneConfig.get("uploadSliceSize")  # Fetch batch upload size
    retry = 0
    slice = 0

    while True:
        resultsSlice = results[slice * sliceSize: (slice + 1) * sliceSize]
        if not resultsSlice:
            break  # Exit loop when there are no more results

        testRuns = [
            TEST_RUN.format(
                testname=testname.split(".")[-1].rsplit(".", 3)[1] + "-" + testclass + "-" + testname.rsplit(".", 1)[-1],
                testclass=testclass,
                status=status,
                started=started,
                duration=int(duration),
                package=testname.rsplit(".", 3)[0],
                module=testname.split("-")[-1].rsplit(".", 3)[1]
            )
            for _, testname, testclass, status, started, duration in resultsSlice
        ]

        data = EVIDENCE_TEMPLATE_TEST_SUITE.format(
            test_results="\n".join(testRuns),
            testSuiteID=testSuiteID,
            externalRunID=externalRunID,
            applicationModuleID=applicationModuleID
        )

        # Make the API call to upload test results
        response = self.endpoint.post(
            "test-results",
            dataType="xml",
            data=data
        )

        # Retry mechanism if the request fails
        import time
        if response[0] == "Failed":
            time.sleep(5)
            if retry > 5:
                break  # Stop retrying after 5 attempts
            retry += 1
            continue  # Retry the same batch

        retry = 0
        slice += 1  # Move to the next batch
