def findValidSpaceWorkspace(self, jira):
    """
    Finds a valid space_id and workspace_id for a given Jira by calling OctaneClient.queryStoriesForJira
    """
    for space_id, workspaces in self.config["workspaces"].items():
        for workspace_id in workspaces:
            data = self.octaneClient.queryStoriesForJira(space_id, workspace_id, jira)
            if data:
                credentials_path = f"/dev/core/qzrelease/octane/S/{space_id}-WS/{workspace_id}"
                return {
                    "space_id": space_id,
                    "workspace_id": workspace_id,
                    "rootUrl": self.config["rootUrl"].format(space_id=space_id, workspace_id=workspace_id),
                    "credentialsPath": credentials_path,
                    "rootApplicationModuleID": self.config["workspaces"][space_id][workspace_id]["rootApplicationModuleID"]
                }

    return None


def queryStoriesForJira(self, space_id, workspace_id, jira):
    """
    Makes a call to /stories endpoint using given space_id and workspace_id for the given JIRA.
    """
    original_root = self.endpoint.root
    self.endpoint.root = self.octaneConfig["rootUrl"].format(space_id=space_id, workspace_id=workspace_id)

    query = f"jira_key_udf IN '{jira}'"
    try:
        status, resp = self.endpoint.get(f"stories?fields=id,jira_key_udf,name&query=\"{query}\"")
        if status == "Success" and resp.get("data"):
            return resp["data"]
    except Exception as e:
        logger.error(f"Error in queryStoriesForJira for {space_id}-{workspace_id}: {e}")
    finally:
        self.endpoint.root = original_root

    return None
