const handleEdit = (rowData) => {
  const fullData = JSON.parse(localStorage.getItem("toolsData") || "[]");
  const index = rowData.id - 1;

  const selectedEntry = fullData[index];
  localStorage.setItem("aesFormData", JSON.stringify(selectedEntry));
  localStorage.setItem("editIndex", index);

  navigate("/tools/edit/" + index);
};

const handleDelete = (rowData) => {
  const fullData = JSON.parse(localStorage.getItem("toolsData") || "[]");
  const updatedData = fullData.filter((_, i) => i !== rowData.id - 1);

  localStorage.setItem("toolsData", JSON.stringify(updatedData));
  window.location.reload();
};


useEffect(() => {
  const stored = JSON.parse(localStorage.getItem("toolsData") || "[]");

  const data = stored.map((entry, index) => {
    const row = { id: index + 1 };

    // Choose specific section fields to flatten
    const selectedSections = [
      "Application Details",
      "Leadership Alignment",
      "Build Management",
      "Deployment Management",
      "Environment Refresh"
    ];

    selectedSections.forEach(section => {
      const sectionData = entry[section] || {};
      const firstKey = Object.keys(sectionData)[0];
      row[section] = firstKey ? sectionData[firstKey] : "";
    });

    return row;
  });

  const allCols = Object.keys(data[0] || {});
  const gridCols = allCols.map((key) => ({
    headerName: key.toUpperCase(),
    field: key,
    sortable: true,
    filter: true,
  }));

  gridCols.push({
    headerName: "Actions",
    field: "actions",
    cellRenderer: (params) => (
      <>
        <button onClick={() => handleEdit(params.data)}>Edit</button>
        {" "}
        <button onClick={() => handleDelete(params.data)}>Delete</button>
      </>
    )
  });

  setColumnDefs(gridCols);
  setRowData(data);
}, []);



<button
  onClick={() => {
    localStorage.removeItem("aesFormData");
    localStorage.removeItem("editIndex");
    navigate("/tools/new");
  }}
>
  New Inventory
</button>
