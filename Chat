from graphviz import Digraph

# Create a directed graph
dot = Digraph(format='png', graph_attr={'rankdir': 'TB'}, node_attr={'shape': 'ellipse'})

# Main lifecycle
dot.node('Start', 'Start')
dot.node('Start_Process', 'Start Process')
dot.node('Initialized', 'Initialized')
dot.node('Waiting_Create', 'Waiting Create To Be Sent')
dot.node('Request_Authorization', 'Request For Authorization (Grouped Lifecycle)')
dot.node('Planning_In_Progress', 'Planning In Progress (Grouped Lifecycle)')
dot.node('Scheduled_For_Approval', 'Scheduled For Approval')
dot.node('Scheduled', 'Scheduled')
dot.node('Implementation_In_Progress', 'Implementation In Progress')
dot.node('Completed', 'Completed')
dot.node('Cancelled', 'Cancelled')
dot.node('Failed', 'Failed')
dot.node('Timeout', 'Timeout')

dot.edges([
    ('Start', 'Start_Process'),
    ('Start_Process', 'Initialized'),
    ('Initialized', 'Waiting_Create'),
    ('Waiting_Create', 'Request_Authorization'),
    ('Request_Authorization', 'Planning_In_Progress'),
    ('Planning_In_Progress', 'Scheduled_For_Approval'),
    ('Scheduled_For_Approval', 'Scheduled'),
    ('Scheduled', 'Implementation_In_Progress'),
    ('Implementation_In_Progress', 'Completed'),
    ('Implementation_In_Progress', 'Cancelled'),
    ('Implementation_In_Progress', 'Failed'),
    ('Implementation_In_Progress', 'Timeout')
])

# Request For Authorization Lifecycle
with dot.subgraph(name='cluster_request_authorization') as c:
    c.attr(label='RequestForAuthorization Lifecycle', style='dotted')
    c.node('RA_Started', 'Started')
    c.node('RA_Ticket_Created', 'Ticket Created')
    c.node('RA_Planning_Message', 'Planning Message')
    c.node('RA_Move_To_Planning', 'Move To Planning')
    c.node('RA_Awaiting_Cancel', 'Awaiting Cancel')
    c.node('RA_Message_Received', 'Message Received')
    c.node('RA_Release_Cancelled', 'Release Cancelled')

    c.edges([
        ('RA_Started', 'RA_Ticket_Created'),
        ('RA_Ticket_Created', 'RA_Planning_Message'),
        ('RA_Planning_Message', 'RA_Move_To_Planning'),
        ('RA_Move_To_Planning', 'RA_Awaiting_Cancel'),
        ('RA_Awaiting_Cancel', 'RA_Message_Received'),
        ('RA_Awaiting_Cancel', 'RA_Release_Cancelled'),
    ])

# Planning In Progress Lifecycle
with dot.subgraph(name='cluster_planning') as c:
    c.attr(label='PlanningInProgress Lifecycle', style='dotted')
    c.node('PIP_Started', 'Started')
    c.node('PIP_Check_AIT', 'Check AIT Association')
    c.node('PIP_Resolve_Collisions', 'Resolve Collisions')
    c.node('PIP_GIS_Resolution', 'GIS Resolution')
    c.node('PIP_GIS_Approval', 'GIS Approval')
    c.node('PIP_Approval_Granted', 'Approval Granted')
    c.node('PIP_Implementation_Approved', 'Implementation Approved')

    c.edges([
        ('PIP_Started', 'PIP_Check_AIT'),
        ('PIP_Check_AIT', 'PIP_Resolve_Collisions'),
        ('PIP_Resolve_Collisions', 'PIP_GIS_Resolution'),
        ('PIP_GIS_Resolution', 'PIP_GIS_Approval'),
        ('PIP_GIS_Approval', 'PIP_Approval_Granted'),
        ('PIP_Approval_Granted', 'PIP_Implementation_Approved')
    ])

# Scheduled For Approval Lifecycle
with dot.subgraph(name='cluster_scheduled_for_approval') as c:
    c.attr(label='Scheduled For Approval Lifecycle', style='dotted')
    c.node('SFA_Pre_QA', 'Pre QA')
    c.node('SFA_Maps_Team', 'Maps Team Approval')
    c.node('SFA_Dev_Lob', 'Dev Lob Team')
    c.node('SFA_Test_Approval', 'Overall Test Approval')
    c.node('SFA_QA_Check', 'QA Check')

    c.edges([
        ('SFA_Pre_QA', 'SFA_Maps_Team'),
        ('SFA_Maps_Team', 'SFA_Dev_Lob'),
        ('SFA_Dev_Lob', 'SFA_Test_Approval'),
        ('SFA_Test_Approval', 'SFA_QA_Check')
    ])

# Scheduled Lifecycle
with dot.subgraph(name='cluster_scheduled') as c:
    c.attr(label='Scheduled Lifecycle', style='dotted')
    c.node('SCH_Started', 'Started')
    c.node('SCH_Install_Requested', 'Install Requested')

    c.edges([
        ('SCH_Started', 'SCH_Install_Requested')
    ])

# Implementation In Progress Lifecycle
with dot.subgraph(name='cluster_implementation') as c:
    c.attr(label='ImplementationInProgress Lifecycle', style='dotted')
    c.node('IIP_Started', 'Started')
    c.node('IIP_Implementation_Sent', 'Implementation Sent')
    c.node('IIP_Implementation_Acked', 'Implementation Acked')
    c.node('IIP_Completed_Awaiting', 'Implementation Completed Awaiting')
    c.node('IIP_Successful', 'Implementation Successful')
    c.node('IIP_Unsuccessful', 'Implementation Unsuccessful')

    c.edges([
        ('IIP_Started', 'IIP_Implementation_Sent'),
        ('IIP_Implementation_Sent', 'IIP_Implementation_Acked'),
        ('IIP_Implementation_Acked', 'IIP_Completed_Awaiting'),
        ('IIP_Completed_Awaiting', 'IIP_Successful'),
        ('IIP_Completed_Awaiting', 'IIP_Unsuccessful')
    ])

# Render diagram
dot.render('workflow_state_diagram', format='png', cleanup=False)
