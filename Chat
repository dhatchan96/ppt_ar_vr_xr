from graphviz import Digraph

# Create a directed graph with graphviz
diagram = Digraph(format="png", engine="dot")
diagram.attr(rankdir="LR", size="30,15")  # Layout direction and size
diagram.attr(dpi="300")  # Set high resolution

# Define grouped states
grouped_states = {
    "Ticket Creation": ["createTicket", "handleTicketCreated", "cancelTimeout"],
    "Awaiting States": ["AwaitingCancel", "AwaitingCompletion", "PlanningInProgress"],
    "Implementation": [
        "TaskUpdateStatus", "ChangeUpdateStatus", "InstallRequested",
        "ImplementationInProgress", "ImplementedSent"
    ],
    "Completion": [
        "ReleaseCompleted", "ReleaseSuccessful", "RequestCompletedSync",
        "TaskCancelTimeout", "ChangeCompleted", "AwaitingChangeCompleted",
        "Completed Transition", "Finished"
    ]
}

# Add states to the diagram with grouping
for group, states in grouped_states.items():
    with diagram.subgraph(name=f"cluster_{group}") as cluster:
        cluster.attr(label=group, style="dashed")
        for state in states:
            cluster.node(state, state)

# Define transitions
transitions = [
    ("createTicket", "handleTicketCreated", "Handle Created Ticket"),
    ("handleTicketCreated", "cancelTimeout", "Cancel Timeout"),
    ("cancelTimeout", "AwaitingCancel", "Await Cancel"),
    ("AwaitingCancel", "AwaitingCompletion", "Await Completion"),
    ("AwaitingCompletion", "PlanningInProgress", "Begin Planning"),
    ("PlanningInProgress", "TaskUpdateStatus", "Task Update"),
    ("TaskUpdateStatus", "ChangeUpdateStatus", "Change Update"),
    ("ChangeUpdateStatus", "InstallRequested", "Request Install"),
    ("InstallRequested", "ImplementationInProgress", "Start Implementation"),
    ("ImplementationInProgress", "ImplementedSent", "Implementation Sent"),
    ("ImplementedSent", "ReleaseCompleted", "Release Completed"),
    ("ReleaseCompleted", "ReleaseSuccessful", "Release Successful"),
    ("ReleaseSuccessful", "RequestCompletedSync", "Request Sync Completed"),
    ("RequestCompletedSync", "TaskCancelTimeout", "Task Cancel Timeout"),
    ("TaskCancelTimeout", "ChangeCompleted", "Change Completed"),
    ("ChangeCompleted", "AwaitingChangeCompleted", "Await Change"),
    ("AwaitingChangeCompleted", "Completed Transition", "Final Transition"),
    ("Completed Transition", "Finished", "Finish Workflow")
]

# Add transitions to the diagram
for src, dest, label in transitions:
    diagram.edge(src, dest, label)

# Render the diagram
diagram.render("workflow_state_machine_diagram", format="png", cleanup=False)
