import wx
import os
from src.elevated_access.role_classifier.main import runprocessing_comp1
from src.elevated_access.impact_analysis.main import runprocess_Comp2

class MainPanel(wx.Panel):
    def __init__(self, parent, label, browse_for="file", wildcard="All files (*.*)|*.*"):
        super().__init__(parent)
        self.browse_for = browse_for
        self.wildcard = wildcard

        sizer = wx.BoxSizer(wx.HORIZONTAL)

        self.label = wx.StaticText(self, label=label, size=wx.Size(250, -1))
        self.text_ctrl = wx.TextCtrl(self, style=wx.TE_READONLY, size=wx.Size(250, 20))
        self.browse_button = wx.Button(self, label="Browse")

        if "Extracts" in label:
            self.text_ctrl.SetBackgroundColour("#dceeff")
        elif "Classifier" in label:
            self.text_ctrl.SetBackgroundColour("#e9ddff")
        elif "Config" in label:
            self.text_ctrl.SetBackgroundColour("#d4fcdc")

        sizer.Add(self.label, 0, wx.ALL | wx.EXPAND, 5)
        sizer.Add(self.text_ctrl, 0, wx.ALL | wx.EXPAND, 5)
        sizer.Add(self.browse_button, 0, wx.ALL, 5)

        self.SetSizer(sizer)
        self.browse_button.Bind(wx.EVT_BUTTON, self.on_browse)

    def on_browse(self, event):
        if self.browse_for == "folder":
            with wx.DirDialog(self, "Choose a Directory") as dir_dialog:
                if dir_dialog.ShowModal() == wx.ID_CANCEL:
                    return
                self.text_ctrl.SetValue(dir_dialog.GetPath())
        elif self.browse_for == "file":
            with wx.FileDialog(self, "Choose a file", wildcard=self.wildcard,
                               style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) as file_dialog:
                if file_dialog.ShowModal() == wx.ID_CANCEL:
                    return
                self.text_ctrl.SetValue(file_dialog.GetPath())

    def get_value(self):
        return self.text_ctrl.GetValue()


class PCATRoleClassifierPanel(wx.Panel):
    def __init__(self, parent):
        super().__init__(parent)
        self.sizer = wx.BoxSizer(wx.VERTICAL)

        self.pcat_extracts = MainPanel(self, label="PCAT Extracts", browse_for="folder")
        self.sizer.Add(self.pcat_extracts, 0, wx.ALL | wx.EXPAND)

        self.excel_file = MainPanel(self, label="Select PCAT Platform Classifier File", browse_for="file")
        self.sizer.Add(self.excel_file, 0, wx.ALL | wx.EXPAND)

        self.myaccess_review = MainPanel(self, label="Select Access Review directory", browse_for="folder")
        self.sizer.Add(self.myaccess_review, 0, wx.ALL | wx.EXPAND)

        self.config_file = MainPanel(self, label="Select Config file", browse_for="file", wildcard="Excel files (*.xlsx)|*.xlsx")
        self.sizer.Add(self.config_file, 0, wx.ALL | wx.EXPAND)

        self.output_file = MainPanel(self, label="Output file directory", browse_for="folder")
        self.sizer.Add(self.output_file, 0, wx.ALL | wx.EXPAND)

        self.process_button = wx.Button(self, label="Process")
        self.sizer.Add(self.process_button, 0, wx.ALL | wx.CENTER, 10)

        self.output_display = wx.StaticText(self, label="", style=wx.ALIGN_LEFT)
        self.sizer.Add(self.output_display, 0, wx.ALL | wx.EXPAND, 10)

        self.progress = wx.Gauge(self, range=100, style=wx.GA_HORIZONTAL)
        self.progress.SetValue(0)
        self.sizer.Add(self.progress, 0, wx.ALL | wx.EXPAND, 5)

        self.log_area = wx.TextCtrl(self, style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)
        self.log_area.SetMinSize(wx.Size(-1, 100))
        self.sizer.Add(self.log_area, 0, wx.ALL | wx.EXPAND, 5)

        self.SetSizer(self.sizer)
        self.process_button.Bind(wx.EVT_BUTTON, self.on_process)

    def on_process(self, event):
        try:
            self.progress.SetValue(10)
            self.log_area.AppendText("Starting processing...\n")

            message = runprocessing_comp1(
                pcat_path=self.pcat_extracts.get_value(),
                accessreview_path=self.myaccess_review.get_value(),
                platform_list_path=self.excel_file.get_value(),
                config_path=self.config_file.get_value(),
                output_folder=self.output_file.get_value()
            )

            self.progress.SetValue(90)
            self.output_display.SetLabel(message)
            self.log_area.AppendText("Process completed.\n")
            self.progress.SetValue(100)
        except Exception as e:
            self.output_display.SetLabel(f"Error: {str(e)}")
            self.log_area.AppendText(f"Error: {str(e)}\n")


class PCATUpdateImpactSimulator(PCATRoleClassifierPanel):
    def __init__(self, parent):
        super().__init__(parent)

        self.sizer.Hide(self.output_file)

        self.pcat_document_path = MainPanel(self, label="Select NEW PCAT Metadata Validation Folder", browse_for="folder")
        self.sizer.Insert(self.sizer.GetItemCount() - 2, self.pcat_document_path, 0, wx.ALL | wx.EXPAND)

        self.output_file = MainPanel(self, label="Output file directory", browse_for="folder")
        self.sizer.Insert(self.sizer.GetItemCount() - 2, self.output_file, 0, wx.ALL | wx.EXPAND)

    def on_process(self, event):
        try:
            self.progress.SetValue(10)
            self.log_area.AppendText("Starting NEW PCAT processing...\n")

            message = runprocess_Comp2(
                PCAT_path=self.pcat_extracts.get_value(),
                New_PCAT_path=self.pcat_document_path.get_value(),
                accessReview_path=self.myaccess_review.get_value(),
                PlatformList_path=self.excel_file.get_value(),
                config_path=self.config_file.get_value(),
                report_dir=self.output_file.get_value()
            )

            self.progress.SetValue(90)
            self.output_display.SetLabel(message)
            self.log_area.AppendText("NEW PCAT process completed.\n")
            self.progress.SetValue(100)
        except Exception as e:
            self.output_display.SetLabel(f"Error: {str(e)}")
            self.log_area.AppendText(f"Error: {str(e)}\n")


class MyFrame(wx.Frame):
    def __init__(self):
        super().__init__(parent=None, title="PCAT Tool", size=wx.Size(700, 550))
        notebook = wx.Notebook(self)

        tab1 = PCATRoleClassifierPanel(notebook)
        notebook.AddPage(tab1, "PCAT Role Classifier")

        tab2 = PCATUpdateImpactSimulator(notebook)
        notebook.AddPage(tab2, "PCAT Update Impact Simulator")

        self.Show()


class MyApp(wx.App):
    def OnInit(self):
        frame = MyFrame()
        self.SetTopWindow(frame)
        return True


if __name__ == '__main__':
    app = MyApp()
    app.MainLoop()
