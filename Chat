from graphviz import Digraph

# Create the Digraph
diagram = Digraph(format='png')
diagram.attr(rankdir='LR', size='10,8')

# Main flow states
with diagram.subgraph(name='cluster_main') as main:
    main.attr(label='Main Lifecycle', style='dashed')
    main.node('Start', shape='ellipse')
    main.node('Start Process', shape='ellipse')
    main.node('Initialized', shape='ellipse')
    main.node('Waiting Create To Be Sent', shape='ellipse')
    main.node('Request For Authorization', shape='ellipse')
    main.node('Planning In Progress', shape='ellipse')
    main.node('Scheduled For Approval', shape='ellipse')
    main.node('Scheduled', shape='ellipse')
    main.node('Implementation In Progress', shape='ellipse')
    main.node('Completed', shape='ellipse')
    main.node('Cancelled', shape='ellipse')
    main.node('Failed', shape='ellipse')
    main.node('Timeout', shape='ellipse')

    # Main lifecycle connections
    main.edges([
        ('Start', 'Start Process'),
        ('Start Process', 'Initialized'),
        ('Initialized', 'Waiting Create To Be Sent'),
        ('Waiting Create To Be Sent', 'Request For Authorization'),
        ('Request For Authorization', 'Planning In Progress'),
        ('Planning In Progress', 'Scheduled For Approval'),
        ('Scheduled For Approval', 'Scheduled'),
        ('Scheduled', 'Implementation In Progress'),
        ('Implementation In Progress', 'Completed'),
        ('Implementation In Progress', 'Cancelled'),
        ('Implementation In Progress', 'Failed'),
        ('Implementation In Progress', 'Timeout')
    ])

# Request For Authorization Lifecycle
with diagram.subgraph(name='cluster_rfa') as rfa:
    rfa.attr(label='RequestForAuthorization Lifecycle', style='dashed')
    rfa.node('Started', shape='ellipse')
    rfa.node('Ticket Created', shape='ellipse')
    rfa.node('Planning Message', shape='ellipse')
    rfa.node('Move To Planning', shape='ellipse')
    rfa.node('Awaiting Cancel', shape='ellipse')
    rfa.node('Message Received', shape='ellipse')
    rfa.node('Release Cancelled', shape='ellipse')

    # RFA lifecycle connections
    rfa.edges([
        ('Started', 'Ticket Created'),
        ('Ticket Created', 'Planning Message'),
        ('Planning Message', 'Move To Planning'),
        ('Move To Planning', 'Awaiting Cancel'),
        ('Awaiting Cancel', 'Message Received'),
        ('Message Received', 'Release Cancelled')
    ])
    rfa.node('Cancelled', shape='ellipse')
    rfa.edge('Awaiting Cancel', 'Cancelled')

# Planning In Progress Lifecycle
with diagram.subgraph(name='cluster_pip') as pip:
    pip.attr(label='PlanningInProgress Lifecycle', style='dashed')
    pip.node('Started', shape='ellipse')
    pip.node('Check AIT Association', shape='ellipse')
    pip.node('Resolve Collisions', shape='ellipse')
    pip.node('GIS Resolution', shape='ellipse')
    pip.node('GIS Approval', shape='ellipse')
    pip.node('Approval Granted', shape='ellipse')
    pip.node('Implementation Approved', shape='ellipse')

    # PIP lifecycle connections
    pip.edges([
        ('Started', 'Check AIT Association'),
        ('Check AIT Association', 'Resolve Collisions'),
        ('Resolve Collisions', 'GIS Resolution'),
        ('GIS Resolution', 'GIS Approval'),
        ('GIS Approval', 'Approval Granted'),
        ('Approval Granted', 'Implementation Approved')
    ])

# Scheduled For Approval Lifecycle
with diagram.subgraph(name='cluster_sfa') as sfa:
    sfa.attr(label='Scheduled For Approval Lifecycle', style='dashed')
    sfa.node('Pre QA', shape='ellipse')
    sfa.node('Maps Team Approval', shape='ellipse')
    sfa.node('Dev Lob Team', shape='ellipse')
    sfa.node('Overall Test Approval', shape='ellipse')
    sfa.node('QA Check', shape='ellipse')

    # SFA lifecycle connections
    sfa.edges([
        ('Pre QA', 'Maps Team Approval'),
        ('Maps Team Approval', 'Dev Lob Team'),
        ('Dev Lob Team', 'Overall Test Approval'),
        ('Overall Test Approval', 'QA Check'),
        ('QA Check', 'Scheduled')
    ])

# Implementation In Progress Lifecycle
with diagram.subgraph(name='cluster_iip') as iip:
    iip.attr(label='ImplementationInProgress Lifecycle', style='dashed')
    iip.node('Started', shape='ellipse')
    iip.node('Implementation Sent', shape='ellipse')
    iip.node('Implementation Acked', shape='ellipse')
    iip.node('Implementation Completed Awaiting', shape='ellipse')
    iip.node('Implementation Successful', shape='ellipse')
    iip.node('Implementation Unsuccessful', shape='ellipse')

    # IIP lifecycle connections
    iip.edges([
        ('Started', 'Implementation Sent'),
        ('Implementation Sent', 'Implementation Acked'),
        ('Implementation Acked', 'Implementation Completed Awaiting'),
        ('Implementation Completed Awaiting', 'Implementation Successful'),
        ('Implementation Completed Awaiting', 'Implementation Unsuccessful')
    ])

# Optional Awaiting Cancel state
diagram.node('Awaiting Cancel (Optional)', shape='ellipse', style='dashed')
diagram.edge('Request For Authorization', 'Awaiting Cancel (Optional)', style='dotted')
diagram.edge('Planning In Progress', 'Awaiting Cancel (Optional)', style='dotted')
diagram.edge('Scheduled For Approval', 'Awaiting Cancel (Optional)', style='dotted')
diagram.edge('Implementation In Progress', 'Awaiting Cancel (Optional)', style='dotted')

# Render the diagram
diagram.render('workflow_state_diagram', view=True)
