import unittest
from unittest.mock import MagicMock, patch

# Import your module where ValidateUploadRegressionTestEvidence is defined.
# from your_module import YourClassContainingTheMethod

class TestValidateUploadRegressionTestEvidence(unittest.TestCase):

    def setUp(self):
        # Initialize your class here
        self.obj = YourClassContainingTheMethod()
        
        # Mock dependencies
        self.obj.UploadRegressionTestEvidence = MagicMock()
        self.obj.RegressionJiraId = MagicMock()
        self.obj.RequestOnly = MagicMock()
        self.obj.Build = MagicMock()

    @patch('your_module.dag.ValidationResults')  # patch ValidationResults object
    def test_validate_upload_regression_test_evidence_with_no_octane_id(self, mock_validation_results):
        # Arrange
        self.obj.UploadRegressionTestEvidence.return_value = 'Some Octane Test Evidence'
        self.obj.RegressionJiraId.return_value = 'JIRA-1234'
        self.obj.RequestOnly.return_value = True
        
        mock_fetch_octane_id = MagicMock()
        mock_fetch_octane_id.get.return_value = False  # Simulate missing OctaneId
        
        build_mock = MagicMock()
        build_mock.fetchOctaneIDFromJiras.return_value = mock_fetch_octane_id
        self.obj.Build.return_value = build_mock

        # Act
        result = self.obj.ValidateUploadRegressionTestEvidence()

        # Assert
        mock_validation_results.assert_called_once_with(
            errors=["JIRA-1234 does not have OctaneId, Please check the SPK is onboarded to Octane."]
        )
        self.assertEqual(result, mock_validation_results())

    def test_validate_upload_regression_test_evidence_no_octane_keyword(self):
        # Arrange
        self.obj.UploadRegressionTestEvidence.return_value = 'Some other evidence'
        self.obj.RegressionJiraId.return_value = 'JIRA-5678'
        self.obj.RequestOnly.return_value = True
        
        # Act
        result = self.obj.ValidateUploadRegressionTestEvidence()

        # Assert
        self.assertIsNone(result)  # Should not trigger validation error if no 'Octane' keyword

if __name__ == '__main__':
    unittest.main()
