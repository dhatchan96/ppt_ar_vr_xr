"""
Regression Test Script for Octane Client

Covers:
- Test result upload
- Retrieval validation
- Deletion and re-upload scenarios
"""

import logging
import hashlib
from datetime import datetime
import pytz
from octane_client import OctaneClient  # Assuming client.py exposes this
from test_data import get_sample_test_data  # Hypothetical helper for test data

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.DEBUG)

OCTANE_ID = "OCTANE-1234"
SUITE_RUN_ID = "suite-run-001"
APPLICATION_MODULE_ID = "mod-001"
TEST_SUITE_ID = "suite-001"
TEST_SUITE_PATH = "module/path/here"
EXTERNAL_RUN_ID = "run-ext-001"

def generate_test_results(issue_key, test_data):
    test_results = []
    now = datetime.now(pytz.utc)
    for data in test_data:
        uid = f"{data['Guid']}-{data['Buildchain']}-{data['Script']}-{data['Test']}"
        test_id = hashlib.sha256(uid.encode('utf-8')).hexdigest()
        test_results.append({
            "testCaseId": test_id,
            "status": "PASS" if data.get("Ok") == "1" else "FAIL",
            "testName": data["Test"],
            "scriptName": data["Script"],
            "timestamp": now,
            "backlogId": issue_key
        })
    return test_results

def test_octane_upload_flow():
    logger.info("Starting Octane Client regression test...")

    # Initialize client
    config = {
        "signInURL": "https://octane.example.com/auth",
        "uploadSliceSize": 10,
        "retry_delay": 2,
        "max_retries": 3,
        "releaseName": "QZRelease2"
    }
    client = OctaneClient(config)

    # Get and prepare test data
    issue_key = OCTANE_ID
    raw_data = get_sample_test_data()
    test_results = generate_test_results(issue_key, raw_data)

    # Upload
    logger.info("Uploading test results...")
    client.upload(test_results, EXTERNAL_RUN_ID, APPLICATION_MODULE_ID, TEST_SUITE_ID, TEST_SUITE_PATH)

    # Validate upload by retrieving suite run
    logger.info("Validating suite run exists...")
    suite_info = client.getSuiteRun("RegressionSuite", SUITE_RUN_ID)
    assert suite_info, "Suite run not found"

    # Link to backlog
    logger.info("Linking test runs to Octane backlog...")
    client.updateAutoRuns(issue_key, "RegressionSuite", SUITE_RUN_ID)

    logger.info("Octane Client regression flow completed successfully.")

if __name__ == "__main__":
    test_octane_upload_flow()
