import React, { useEffect, useMemo, useState } from "react";
import { AgGridReact } from "ag-grid-react";
import "ag-grid-community/styles/ag-grid.css";
import "ag-grid-community/styles/ag-theme-alpine.css";

import FormSection from "./FormSection"; // Your multi-step form component

export default function ToolsInventory() {
  const [columnDefs, setColumnDefs] = useState([]);
  const [rowData, setRowData] = useState([]);
  const [quickFilterText, setQuickFilterText] = useState("");
  const [showForm, setShowForm] = useState(false);
  const [editData, setEditData] = useState(null);

  // Load data from localStorage and set up columns
  useEffect(() => {
    const storedData = JSON.parse(localStorage.getItem("aesFormData")) || {};
    const mergedRows = Object.entries(storedData).map(([section, values], index) => ({
      id: index,
      section,
      ...values,
    }));

    const allKeys = new Set();
    mergedRows.forEach((row) => {
      Object.keys(row).forEach((key) => allKeys.add(key));
    });

    const cols = Array.from(allKeys).map((key) => ({
      headerName: key.toUpperCase(),
      field: key,
      sortable: true,
      filter: true,
      resizable: true,
    }));

    cols.push({
      headerName: "ACTIONS",
      field: "actions",
      cellRenderer: (params) => (
        <>
          <button onClick={() => handleEdit(params.data)}>Edit</button>{" "}
          <button onClick={() => handleDelete(params.data)}>Delete</button>
        </>
      ),
    });

    setColumnDefs(cols);
    setRowData(mergedRows);
  }, [showForm]);

  // Handle edit button click
  const handleEdit = (data) => {
    localStorage.setItem("editItem", JSON.stringify(data));
    setEditData(data);
    setShowForm(true);
  };

  // Handle delete button click
  const handleDelete = (data) => {
    const currentData = JSON.parse(localStorage.getItem("aesFormData")) || {};
    const updated = Object.fromEntries(
      Object.entries(currentData).filter(([, values]) => JSON.stringify(values) !== JSON.stringify(data))
    );
    localStorage.setItem("aesFormData", JSON.stringify(updated));
    window.location.reload();
  };

  const defaultColDef = useMemo(() => ({
    flex: 1,
    minWidth: 120,
  }), []);

  return (
    <div style={{ padding: 16 }}>
      {!showForm ? (
        <>
          <div style={{ marginBottom: 10, display: "flex", justifyContent: "space-between" }}>
            <input
              type="text"
              placeholder="Search across all fields..."
              style={{ width: 300, padding: 6 }}
              onChange={(e) => setQuickFilterText(e.target.value)}
            />
            <button
              onClick={() => {
                localStorage.removeItem("editItem");
                setEditData(null);
                setShowForm(true);
              }}
              style={{ padding: "6px 12px", background: "#004080", color: "white", border: "none", borderRadius: 4 }}
            >
              New Inventory
            </button>
          </div>

          <div className="ag-theme-alpine" style={{ height: "85vh", width: "100%" }}>
            <AgGridReact
              rowData={rowData}
              columnDefs={columnDefs}
              defaultColDef={defaultColDef}
              pagination
              paginationPageSize={100}
              animateRows
              quickFilterText={quickFilterText}
            />
          </div>
        </>
      ) : (
        <FormSection
          editData={editData}
          onCancel={() => {
            setShowForm(false);
            setEditData(null);
          }}
        />
      )}
    </div>
  );
}
