import unittest2 as unittest

from your_module_path import OCTANE_CONFIG  # Replace `your_module_path` with actual import path


class QzConfigOctaneTest(unittest.TestCase):

    def test_structure(self):
        self.assertIsInstance(OCTANE_CONFIG, dict)

        required_envs = ['DEV', 'PROD']
        for env in required_envs:
            self.assertIn(env, OCTANE_CONFIG, f"{env} config missing")

            env_config = OCTANE_CONFIG[env]
            self.assertIsInstance(env_config, dict)

            # Required top-level keys in each env config
            required_keys = [
                'system', 'rootApplicationModuleName', 'signInURL', 'credentialRoot', 'rootUrl',
                'uploadSliceSize', 'autoRunsSliceSize', 'autoRunsPaginationLimit',
                'autoRunsPaginationOffset', 'max_retries', 'num_threads',
                'retry_delay', 'rootAppModuleID', 'releaseName'
            ]

            for key in required_keys:
                self.assertIn(key, env_config, f"Missing key '{key}' in {env}")
                self.assertIsNotNone(env_config[key], f"Key '{key}' in {env} should not be None")

    def test_values(self):
        # Simple value tests for expected static values
        self.assertEqual(OCTANE_CONFIG['DEV']['system'], 'octane')
        self.assertEqual(OCTANE_CONFIG['PROD']['system'], 'octane')

        for env, config in OCTANE_CONFIG.items():
            self.assertTrue(config['signInURL'].startswith("https://octane.horizon.bankofamerica.com"))

            self.assertIn('{space_id}', config['rootUrl'])
            self.assertIn('{workspace_id}', config['rootUrl'])

    def test_upload_limits(self):
        for env, config in OCTANE_CONFIG.items():
            self.assertLessEqual(config['uploadSliceSize'], 1000)
            self.assertLessEqual(config['autoRunsSliceSize'], 500)
            self.assertGreater(config['num_threads'], 0)


if __name__ == "__main__":
    from qz.core.test.qzunittest import qzUnitTest
    qzUnitTest(headless=True, cleanOutput=True)
