import wx
import os
import pandas as pd

class FileExtractor(wx.Frame):
    def __init__(self):
        super().__init__(parent=None, title="PDF Extractor - Config Based", size=(700, 400))
        panel = wx.Panel(self)
        notebook = wx.Notebook(panel)

        self.pdf_dir_path = ""
        self.config_file_path = ""
        self.output_path = ""

        # === Tab 1 ===
        tab1 = wx.Panel(notebook)
        tab1.SetBackgroundColour(wx.Colour(245, 245, 245))  # light gray

        main_sizer = wx.BoxSizer(wx.VERTICAL)

        # Style helpers
        label_font = wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD)

        # --- PDF Directory ---
        pdf_sizer = wx.BoxSizer(wx.HORIZONTAL)
        pdf_label = wx.StaticText(tab1, label="PDF Directory:")
        pdf_label.SetFont(label_font)
        self.pdf_path_ctrl = wx.TextCtrl(tab1, style=wx.TE_READONLY)
        self.pdf_path_ctrl.SetBackgroundColour(wx.Colour(230, 240, 255))
        pdf_btn = wx.Button(tab1, label="Browse")
        pdf_btn.Bind(wx.EVT_BUTTON, self.browse_pdf_directory)
        pdf_sizer.Add(pdf_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 10)
        pdf_sizer.Add(self.pdf_path_ctrl, 1, wx.EXPAND | wx.RIGHT, 10)
        pdf_sizer.Add(pdf_btn, 0)
        main_sizer.Add(pdf_sizer, 0, wx.EXPAND | wx.ALL, 10)

        # --- Config Excel File ---
        config_sizer = wx.BoxSizer(wx.HORIZONTAL)
        config_label = wx.StaticText(tab1, label="Config Excel File:")
        config_label.SetFont(label_font)
        self.config_path_ctrl = wx.TextCtrl(tab1, style=wx.TE_READONLY)
        self.config_path_ctrl.SetBackgroundColour(wx.Colour(240, 230, 255))
        config_btn = wx.Button(tab1, label="Browse")
        config_btn.Bind(wx.EVT_BUTTON, self.browse_config_file)
        config_sizer.Add(config_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 10)
        config_sizer.Add(self.config_path_ctrl, 1, wx.EXPAND | wx.RIGHT, 10)
        config_sizer.Add(config_btn, 0)
        main_sizer.Add(config_sizer, 0, wx.EXPAND | wx.ALL, 10)

        # --- Output Path ---
        output_sizer = wx.BoxSizer(wx.HORIZONTAL)
        output_label = wx.StaticText(tab1, label="Save Output As:")
        output_label.SetFont(label_font)
        self.output_path_ctrl = wx.TextCtrl(tab1, style=wx.TE_READONLY)
        self.output_path_ctrl.SetBackgroundColour(wx.Colour(230, 255, 230))
        output_btn = wx.Button(tab1, label="Browse")
        output_btn.Bind(wx.EVT_BUTTON, self.choose_output_file)
        output_sizer.Add(output_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 10)
        output_sizer.Add(self.output_path_ctrl, 1, wx.EXPAND | wx.RIGHT, 10)
        output_sizer.Add(output_btn, 0)
        main_sizer.Add(output_sizer, 0, wx.EXPAND | wx.ALL, 10)

        # --- Process Button ---
        process_btn = wx.Button(tab1, label="Extract and Save")
        process_btn.Bind(wx.EVT_BUTTON, self.process_files)
        main_sizer.Add(process_btn, 0, wx.ALIGN_LEFT | wx.ALL, 15)

        tab1.SetSizer(main_sizer)

        # === Tab 2 ===
        tab2 = wx.Panel(notebook)
        self.file_listbox = wx.ListBox(tab2)
        tab2_sizer = wx.BoxSizer(wx.VERTICAL)
        tab2_sizer.Add(self.file_listbox, 1, wx.EXPAND | wx.ALL, 10)
        tab2.SetSizer(tab2_sizer)

        notebook.AddPage(tab1, "PDF Extraction")
        notebook.AddPage(tab2, "PDF Files Found")

        # Layout the notebook
        frame_sizer = wx.BoxSizer(wx.VERTICAL)
        frame_sizer.Add(notebook, 1, wx.EXPAND | wx.ALL, 10)
        panel.SetSizer(frame_sizer)

        self.Centre()
        self.Show()

    def browse_pdf_directory(self, event):
        with wx.DirDialog(self, "Select PDF Directory") as dialog:
            if dialog.ShowModal() == wx.ID_OK:
                self.pdf_dir_path = dialog.GetPath()
                self.pdf_path_ctrl.SetValue(self.pdf_dir_path)

    def browse_config_file(self, event):
        with wx.FileDialog(self, "Select Config Excel File", wildcard="Excel files (*.xls;*.xlsx)|*.xls;*.xlsx",
                           style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) as dialog:
            if dialog.ShowModal() == wx.ID_OK:
                self.config_file_path = dialog.GetPath()
                self.config_path_ctrl.SetValue(self.config_file_path)

    def choose_output_file(self, event):
        with wx.FileDialog(self, "Save Output File", wildcard="Excel files (*.xlsx)|*.xlsx",
                           style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT) as dialog:
            if dialog.ShowModal() == wx.ID_OK:
                self.output_path = dialog.GetPath()
                self.output_path_ctrl.SetValue(self.output_path)

    def process_files(self, event):
        if not self.pdf_dir_path or not self.config_file_path:
            wx.MessageBox("Please select both PDF directory and Config Excel file!", "Error", wx.ICON_ERROR)
            return

        combined_df = pd.DataFrame()

        try:
            config_df = pd.read_excel(self.config_file_path)
            combined_df = config_df.copy()  # Replace with actual processing logic
        except Exception as e:
            wx.MessageBox(f"Error reading config file:\n{str(e)}", "Error", wx.ICON_ERROR)
            return

        pdf_files = [os.path.join(self.pdf_dir_path, f) for f in os.listdir(self.pdf_dir_path)
                     if f.lower().endswith(".pdf")]
        self.file_listbox.Clear()
        self.file_listbox.InsertItems(pdf_files, 0)

        if self.output_path:
            combined_df.to_excel(self.output_path, index=False)
            wx.MessageBox("File saved successfully!", "Success")
        else:
            wx.MessageBox("Please choose an output file path!", "Error", wx.ICON_ERROR)

if __name__ == '__main__':
    app = wx.App(False)
    frame = FileExtractor()
    app.MainLoop()
