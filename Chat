Here’s the Python code to generate the state diagram using the graphviz library:

from graphviz import Digraph

# Create a directed graph
dot = Digraph(comment="Workflow State Diagram", format="png")

# Define clusters for grouped lifecycles
with dot.subgraph(name="cluster_RequestForAuthorization") as c1:
    c1.attr(label="RequestForAuthorization Lifecycle")
    c1.node("Started", "Started")
    c1.node("TicketCreated", "Ticket Created")
    c1.node("PlanningMessage", "Planning Message")
    c1.node("MoveToPlanning", "Move To Planning")
    c1.node("AwaitingCancel", "Awaiting Cancel")
    c1.node("Cancelled", "Cancelled")
    c1.node("MessageReceived", "Message Received")
    c1.node("ReleaseCancelled", "Release Cancelled")
    c1.edges([
        ("Started", "TicketCreated"),
        ("TicketCreated", "PlanningMessage"),
        ("PlanningMessage", "MoveToPlanning"),
        ("MoveToPlanning", "AwaitingCancel"),
        ("AwaitingCancel", "Cancelled"),
        ("AwaitingCancel", "MessageReceived"),
        ("MessageReceived", "ReleaseCancelled")
    ])

with dot.subgraph(name="cluster_PlanningInProgress") as c2:
    c2.attr(label="PlanningInProgress Lifecycle")
    c2.node("Started_P", "Started")
    c2.node("CheckAIT", "Check AIT Association")
    c2.node("ResolveCollisions", "Resolve Collisions")
    c2.node("GISResolution", "GIS Resolution")
    c2.node("GISApproval", "GIS Approval")
    c2.node("ApprovalGranted", "Approval Granted")
    c2.node("ImplementationApproved", "Implementation Approved")
    c2.edges([
        ("Started_P", "CheckAIT"),
        ("CheckAIT", "ResolveCollisions"),
        ("ResolveCollisions", "GISResolution"),
        ("GISResolution", "GISApproval"),
        ("GISApproval", "ApprovalGranted"),
        ("ApprovalGranted", "ImplementationApproved")
    ])

with dot.subgraph(name="cluster_ScheduledLifecycle") as c3:
    c3.attr(label="Scheduled Lifecycle")
    c3.node("Started_S", "Started")
    c3.node("InstallRequested", "Install Requested")
    c3.node("ImplementationInProgress", "Implementation In Progress")
    c3.edges([
        ("Started_S", "InstallRequested"),
        ("InstallRequested", "ImplementationInProgress")
    ])

with dot.subgraph(name="cluster_ImplementationInProgress") as c4:
    c4.attr(label="ImplementationInProgress Lifecycle")
    c4.node("Started_I", "Started")
    c4.node("ImplementationSent", "Implementation Sent")
    c4.node("ImplementationAcked", "Implementation Acked")
    c4.node("ImplementationCompletedAwaiting", "Implementation Completed Awaiting")
    c4.node("ImplementationSuccessful", "Implementation Successful")
    c4.node("ImplementationUnsuccessful", "Implementation Unsuccessful")
    c4.edges([
        ("Started_I", "ImplementationSent"),
        ("ImplementationSent", "ImplementationAcked"),
        ("ImplementationAcked", "ImplementationCompletedAwaiting"),
        ("ImplementationCompletedAwaiting", "ImplementationSuccessful"),
        ("ImplementationCompletedAwaiting", "ImplementationUnsuccessful")
    ])

# Main flow
dot.node("Start", "Start")
dot.node("StartProcess", "Start Process")
dot.node("Initialized", "Initialized")
dot.node("WaitingCreateToBeSent", "Waiting CreateToBeSent")
dot.node("RequestForAuthorization", "Request For Authorization (Grouped Lifecycle)")
dot.node("PlanningInProgress", "Planning In Progress (Grouped Lifecycle)")
dot.node("Scheduled", "Scheduled")
dot.node("Completed", "Completed")
dot.node("Cancelled_Main", "Cancelled")
dot.node("Failed", "Failed")
dot.node("Timeout", "Timeout")

dot.edges([
    ("Start", "StartProcess"),
    ("StartProcess", "Initialized"),
    ("Initialized", "WaitingCreateToBeSent"),
    ("WaitingCreateToBeSent", "RequestForAuthorization"),
    ("RequestForAuthorization", "PlanningInProgress"),
    ("PlanningInProgress", "Scheduled"),
    ("Scheduled", "ImplementationInProgress"),
    ("ImplementationInProgress", "Completed"),
    ("ImplementationInProgress", "Cancelled_Main"),
    ("ImplementationInProgress", "Failed"),
    ("ImplementationInProgress", "Timeout")
])

# Save and render the diagram
dot.render("workflow_state_diagram", format="png", cleanup=True)
print("State diagram generated as 'workflow_state_diagram.png'")

Instructions:

1. Install the graphviz library if you don’t have it already:

pip install graphviz


2. Copy the code into a Python file, e.g., generate_state_diagram.py.


3. Run the Python script.


4. The state diagram will be saved as workflow_state_diagram.png in your current working directory.



Let me know if you'd like further assistance!

