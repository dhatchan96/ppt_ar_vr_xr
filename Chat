import unittest
import json
from flask import Flask
from unittest import mock
from qz.sdlc.rm.services import releasemanager
from qz.sdlc.rm.services.releasemanager import getReleaseContainer, updateContainerWorkItems

class ReleaseManagerTestCase(unittest.TestCase):

    def setUp(self):
        self.app = Flask(__name__)
        self.app.register_blueprint(releasemanager.releasemanager)
        self._makeTestURL = lambda page='': page  # Simulate URL generation used in test context

    @mock.patch('releasemanager.releaseManagerService.getReleaseContainer')
    def test_get_release_container(self, mock_get):
        mock_get.return_value = {'status': True, 'body': {'container': 'xyz'}}
        with self.app.test_request_context(self._makeTestURL(page='/getReleaseContainer?releaseContainerID=test123')):
            response = getReleaseContainer()
            self.assertEqual(200, response.status_code)

    @mock.patch('releasemanager.releaseManagerService.updateContainerWorkItems')
    def test_update_work_items(self, mock_update):
        mock_update.return_value = {'status': True, 'message': 'Updated'}
        payload = {
            'releaseContainerID': 'test123',
            'work_items': ['WI123'],
            'action': 'ADD'
        }
        with self.app.test_request_context(
            self._makeTestURL(page='/updateContainerWorkItems'),
            method='POST',
            data=json.dumps(payload),
            content_type='application/json'
        ):
            response = updateContainerWorkItems()
            self.assertEqual(200, response.status_code)

if __name__ == '__main__':
    unittest.main()
