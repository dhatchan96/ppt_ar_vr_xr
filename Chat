 def findValidSpaceWorkspace(self, jira):
    """
    Find the space_id and workspace_id by hitting the /stories endpoint.
    """
    for space_id, workspaces in self.octaneConfig["workspaces"].items():
        for workspace_id in workspaces.keys():
            url = self.octaneConfig["rootUrl"].format(space_id=space_id, workspace_id=workspace_id) + \
                  "/stories?fields=id,jira_key_udf,name&query=\"jira_key_udf IN '%s'\"" % jira
            try:
                response = requests.get(
                    url,
                    cookies=self.endpoint._getCookie(),
                    verify=False,
                    headers={"Content-Type": "application/json"},
                    timeout=10
                )
                respData = response.json()
                if response.status_code == 200 and respData.get("data"):
                    credentials_path = f"/dev/core/qzrelease/octane/S/{space_id}-WS/{workspace_id}"
                    return {
                        "space_id": space_id,
                        "workspace_id": workspace_id,
                        "rootUrl": self.octaneConfig["rootUrl"].format(space_id=space_id, workspace_id=workspace_id),
                        "credentialsPath": credentials_path,
                        "rootApplicationModuleID": self.octaneConfig["workspaces"][space_id][workspace_id]["rootApplicationModuleID"]
                    }
            except requests.exceptions.RequestException as e:
                print(f"Error checking {url}: {e}")
    return None
