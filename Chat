import React, { useState, useEffect } from "react";
import ApplicationDetails from "./forms/ApplicationDetails";
import LeadershipAlignment from "./forms/LeadershipAlignment";
import BuildManagement from "./forms/BuildManagement";
import DeploymentManagement from "./forms/DeploymentManagement";
import EnvironmentRefresh from "./forms/EnvironmentRefresh";
import EnvironmentPatching from "./forms/EnvironmentPatching";
import EnvironmentMonitoring from "./forms/EnvironmentMonitoring";
import EnvironmentHousekeeping from "./forms/EnvironmentHousekeeping";
import LEMResponsibilities from "./forms/LEMResponsibilities";
import TeamDynamics from "./forms/TeamDynamics";
import OtherActivities from "./forms/OtherActivities";
import KeyContacts from "./forms/KeyContacts";
import EnvironmentLandscape from "./forms/EnvironmentLandscape";
import ProgressBar from "./ProgressBar";

const sections = [
  { name: "Application Details" },
  { name: "Leadership Alignment" },
  { name: "Build Management" },
  { name: "Deployment Management" },
  { name: "Environment Refresh" },
  { name: "Environment Patching" },
  { name: "Environment Monitoring" },
  { name: "Environment Housekeeping" },
  { name: "LEM Responsibilities" },
  { name: "Team Dynamics" },
  { name: "Other Activities" },
  { name: "Key Contacts" },
  { name: "Environment Landscape" },
];

export default function FormSection({ editData = null, onCancel }) {
  const [currentStep, setCurrentStep] = useState(0);
  const [formValues, setFormValues] = useState({});

  useEffect(() => {
    if (editData) {
      setFormValues(editData);
    }
  }, [editData]);

  const section = sections[currentStep];
  const values = formValues[section.name] || {};

  const handleChange = (sectionName, updatedValues) => {
    setFormValues((prev) => ({
      ...prev,
      [sectionName]: updatedValues,
    }));
  };

  const handlePrev = () => setCurrentStep((s) => s - 1);
  const handleNext = () => setCurrentStep((s) => s + 1);

  const handleSave = () => {
    const allData = JSON.parse(localStorage.getItem("aesFormData")) || {};
    const updatedData = { ...allData, ...formValues };
    localStorage.setItem("aesFormData", JSON.stringify(updatedData));
    localStorage.removeItem("editItem");
    onCancel();
  };

  const formProps = {
    onNext: handleNext,
    onPrev: handlePrev,
    isFirst: currentStep === 0,
    isLast: currentStep === sections.length - 1,
    onChange: handleChange,
    values,
  };

  const renderSection = () => {
    switch (section.name) {
      case "Application Details":
        return <ApplicationDetails {...formProps} />;
      case "Leadership Alignment":
        return <LeadershipAlignment {...formProps} />;
      case "Build Management":
        return <BuildManagement {...formProps} />;
      case "Deployment Management":
        return <DeploymentManagement {...formProps} />;
      case "Environment Refresh":
        return <EnvironmentRefresh {...formProps} />;
      case "Environment Patching":
        return <EnvironmentPatching {...formProps} />;
      case "Environment Monitoring":
        return <EnvironmentMonitoring {...formProps} />;
      case "Environment Housekeeping":
        return <EnvironmentHousekeeping {...formProps} />;
      case "LEM Responsibilities":
        return <LEMResponsibilities {...formProps} />;
      case "Team Dynamics":
        return <TeamDynamics {...formProps} />;
      case "Other Activities":
        return <OtherActivities {...formProps} />;
      case "Key Contacts":
        return <KeyContacts {...formProps} />;
      case "Environment Landscape":
        return <EnvironmentLandscape {...formProps} />;
      default:
        return null;
    }
  };

  return (
    <div>
      {editData && (
        <div style={{ background: "#fdf2d9", padding: 10, marginBottom: 16, borderLeft: "4px solid #ffa500" }}>
          <strong>Editing existing inventory record.</strong>
        </div>
      )}

      <ProgressBar currentStep={currentStep} totalSteps={sections.length} />

      {renderSection()}

      <div style={{ display: "flex", justifyContent: "space-between", marginTop: 20 }}>
        <button onClick={onCancel}>Cancel</button>
        {currentStep === sections.length - 1 ? (
          <button onClick={handleSave}>Save</button>
        ) : (
          <button onClick={handleNext}>Next</button>
        )}
      </div>
    </div>
  );
}
