import { useParams, useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";

export default function FormSection({ section, onNext, onPrev, isFirst, isLast, onChange, values }) {
  const { id } = useParams();
  const navigate = useNavigate();
  const [sectionData, setSectionData] = useState(section);

  useEffect(() => {
    if (!section && id !== undefined) {
      const toolsData = JSON.parse(localStorage.getItem("toolsData") || "[]");
      const selected = toolsData[parseInt(id, 10)];

      if (selected) {
        // Load section keys and values from stored data
        const sectionKeys = Object.keys(selected);
        const defaultSection = sectionKeys[0]; // assuming one section per edit
        setSectionData({ name: defaultSection });
        localStorage.setItem("aesFormData", JSON.stringify(selected));
      } else {
        navigate("/tools");
      }
    }
  }, [id, section, navigate]);


function renderSection() {
  if (!sectionData || !sectionData.name) {
    return <p>Loading section...</p>;
  }

  switch (sectionData.name) {
    case "Application Details":
      return <ApplicationDetails {...formProps} />;
    case "Leadership Alignment":
      return <LeadershipAlignment {...formProps} />;
    case "Build Management":
      return <BuildManagement {...formProps} />;
    case "Deployment Management":
      return <DeploymentManagement {...formProps} />;
    case "Environment Refresh":
      return <EnvironmentRefresh {...formProps} />;
    case "Environment Patching":
      return <EnvironmentPatching {...formProps} />;
    case "Environment Monitoring":
      return <EnvironmentMonitoring {...formProps} />;
    case "Environment Housekeeping":
      return <EnvironmentHousekeeping {...formProps} />;
    case "LEM Responsibilities":
      return <LEMResponsibilities {...formProps} />;
    case "Team Dynamics":
      return <TeamDynamics {...formProps} />;
    case "Other Activities":
      return <OtherActivities {...formProps} />;
    case "Key Contacts":
      return <KeyContacts {...formProps} />;
    case "Environment Landscape":
      return <EnvironmentLandscape {...formProps} />;
    default:
      return null;
  }
}
