def findValidSpaceWorkspace(self, octane_id_str):
    """
    Forms a valid config dictionary from the provided octane ID format.

    :param octane_id_str: A string in the format "spaceId-workspaceId-*-octaneId"
    :return: A dictionary with space_id, workspace_id, rootUrl, credentialsPath, rootApplicationModuleID
    """
    try:
        space_id, workspace_id, _, _ = octane_id_str.split('-')

        credential_path_template = self.octaneConfig.get("credentialRoot", '')
        credentials_path = f"{credential_path_template}/S{space_id}-WS{workspace_id}"

        return {
            "space_id": space_id,
            "workspace_id": workspace_id,
            "rootUrl": self.octaneConfig["rootUrl"].format(space_id=space_id, workspace_id=workspace_id),
            "credentialsPath": credentials_path,
            "rootApplicationModuleID": self.octaneConfig["workspaces"][space_id][workspace_id]["rootApplicationModuleID"]
        }
    except Exception as e:
        logger.error(f"Error forming config from octane ID string '{octane_id_str}': {e}")
        return None
