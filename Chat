// components/InventoryWizard.js
import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import FormSection      from "./FormSection";
import Sidebar          from "./Sidebar";
import ProgressBar      from "./ProgressBar";

const SECTION_NAMES = [
  "Application Details",
  "Leadership Alignment",
  "Build Management",
  "Deployment Management",
  "Environment Refresh",
  "Environment Patching",
  "Environment Monitoring",
  "Environment Housekeeping",
  "LEM Responsibilities",
  "Team Dynamics",
  "Other Activities",
  "Key Contacts",
  "Environment Landscape"
];

export default function InventoryWizard({ mode }) {
  const { id }   = useParams();           // edit/:id  (undefined in “new” mode)
  const nav      = useNavigate();

  // 🗄️ combined form state, one key per section
  const [formData,  setFormData]  = useState({});
  const [sections,  setSections]  = useState(
    SECTION_NAMES.map((name) => ({ name, completed: false }))
  );
  const [current,   setCurrent]   = useState(0);

  // ───────────────────────── 1. LOAD DATA FOR EDIT ─────────────────────────
  useEffect(() => {
    if (mode === "edit") {
      const all = JSON.parse(localStorage.getItem("toolsData") || "[]");
      const entry = all[Number(id)];
      if (!entry) return nav("/tools");              // bad id ⇒ go back

      setFormData(entry);                            // preload values
      localStorage.setItem("aesFormData", JSON.stringify(entry)); // optional
    } else {
      localStorage.removeItem("aesFormData");        // fresh form
    }
  }, [mode, id, nav]);

  // ───────────────────────── 2. SAVE SECTION CHANGES ───────────────────────
  const handleChange = (sectionName, data) => {
    setFormData((p) => ({ ...p, [sectionName]: data }));
  };

  // ───────────────────────── 3. NAVIGATION helpers ─────────────────────────
  const markCompleted = () => {
    setSections((prev) =>
      prev.map((s, i) =>
        i === current ? { ...s, completed: true } : s
      )
    );
    if (current < sections.length - 1) setCurrent(current + 1);
  };

  const goBack = () => current && setCurrent(current - 1);

  // ───────────────────────── 4. FINAL SAVE ─────────────────────────────────
  const saveAndExit = () => {
    const all = JSON.parse(localStorage.getItem("toolsData") || "[]");

    if (mode === "edit") {
      all[Number(id)] = formData;                 // overwrite
    } else {
      all.push(formData);                         // append
    }
    localStorage.setItem("toolsData", JSON.stringify(all));
    localStorage.removeItem("aesFormData");
    nav("/tools");
  };

  // current section object
  const sectionObj = sections[current];

  return (
    <main className="main-layout">
      <aside className="sidebar"><Sidebar sections={sections} current={current}/></aside>

      <section className="form-wrapper">
        <ProgressBar sections={sections} current={current}/>
        {sectionObj ? (
          <FormSection
            section={sectionObj}
            values={formData[sectionObj.name] || {}}
            onChange={handleChange}
            onNext={markCompleted}
            onPrev={goBack}
            isFirst={current === 0}
            isLast={current === sections.length - 1}
            onSave={saveAndExit}
          />
        ) : (
          <p>Loading section…</p>
        )}
      </section>
    </main>
  );
}
