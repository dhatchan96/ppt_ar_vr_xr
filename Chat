import unittest
from unittest.mock import patch, MagicMock
from flask import json

import releasemanager

class ReleaseManagerTestCase(unittest.TestCase):

    def setUp(self):
        self.app = releasemanager.releasemanager.test_client()
        self.app.testing = True

    @patch('releasemanager.releaseManagerService.getReleaseContainer')
    def test_get_release_container(self, mock_get):
        mock_get.return_value = {'status': True}
        response = self.app.get('/getReleaseContainer?releaseContainerID=test123')
        self.assertEqual(response.status_code, 200)

    @patch('releasemanager.releaseManagerService.updateContainerWorkItems')
    def test_update_work_items(self, mock_update):
        mock_update.return_value = {'status': True}
        payload = {
            'releaseContainerID': 'test123',
            'work_items': ['WI123'],
            'action': 'ADD'
        }
        response = self.app.post('/updateContainerWorkItems', 
                                 data=json.dumps(payload),
                                 content_type='application/json')
        self.assertEqual(response.status_code, 200)

    @patch('releasemanager.releaseManagerService.associateCrqWithContainer')
    def test_associate_crq(self, mock_associate):
        mock_associate.return_value = {'status': True}
        payload = {'releaseContainerID': 'test123', 'crq': 'CRQ123'}
        response = self.app.post('/associateCrqWithContainer',
                                 data=json.dumps(payload),
                                 content_type='application/json')
        self.assertEqual(response.status_code, 200)

    @patch('releasemanager.releaseManagerService.disassociateCrqWithContainer')
    def test_disassociate_crq(self, mock_disassociate):
        mock_disassociate.return_value = {'status': True}
        payload = {'releaseContainerID': 'test123', 'crq': 'CRQ123'}
        response = self.app.post('/disassociateCrqWithContainer',
                                 data=json.dumps(payload),
                                 content_type='application/json')
        self.assertEqual(response.status_code, 200)

    @patch('releasemanager.releaseManagerService.createReleaseContainer')
    def test_create_container(self, mock_create):
        mock_create.return_value = {'status': True}
        payload = {
            'releaseName': 'Rel1',
            'releaseTag': 'v1.0',
            'containerJiraProject': 'PRJ001',
            'changeDescription': 'Initial deployment'
        }
        response = self.app.post('/createReleaseContainer',
                                 data=json.dumps(payload),
                                 content_type='application/json')
        self.assertEqual(response.status_code, 200)

    @patch('releasemanager.releaseManagerService.cancelReleaseContainer')
    def test_cancel_container(self, mock_cancel):
        mock_cancel.return_value = {'status': True}
        payload = {'releaseContainerID': 'test123'}
        response = self.app.post('/cancelReleaseContainer',
                                 data=json.dumps(payload),
                                 content_type='application/json')
        self.assertEqual(response.status_code, 200)

    @patch('releasemanager.releaseManagerService.getAvailableJiraProjects')
    def test_get_jira_projects(self, mock_jira):
        mock_jira.return_value = {'status': True}
        response = self.app.get('/getAvailableJiraProjects')
        self.assertEqual(response.status_code, 200)

    def test_heartbeat(self):
        response = self.app.get('/heartbeat')
        self.assertIn(response.status_code, [200, 500])

    def test_index(self):
        response = self.app.get('/quack')
        self.assertIn(response.status_code, [200, 500])

if __name__ == '__main__':
    unittest.main()
